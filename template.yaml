Transform: AWS::Serverless-2016-10-31
Resources:
# lambdas need NAT gateway to exit VPC bounds. what a bummer. will run this outside VPC.

#  VPC:
#    Type: AWS::EC2::VPC
#    Properties:
#      CidrBlock: 10.0.0.0/16
#
#  InternetGateway:
#    Type: AWS::EC2::InternetGateway
#
#  VPCGatewayAttachment:
#    Type: AWS::EC2::VPCGatewayAttachment
#    Properties:
#      VpcId: !Ref VPC
#      InternetGatewayId: !Ref InternetGateway
#
#  PublicRouteTable:
#    Type: AWS::EC2::RouteTable
#    Properties:
#      VpcId: !Ref VPC
#
#  PublicRoute:
#    Type: AWS::EC2::Route
#    Properties:
#      RouteTableId: !Ref PublicRouteTable
#      DestinationCidrBlock: 0.0.0.0/0
#      GatewayId: !Ref InternetGateway
#
#  PublicSubnet1:
#    Type: AWS::EC2::Subnet
#    Properties:
#      VpcId: !Ref VPC
#      CidrBlock: 10.0.1.0/24
#      MapPublicIpOnLaunch: true
#
#  PublicSubnet1RouteTableAssociation:
#    Type: AWS::EC2::SubnetRouteTableAssociation
#    Properties:
#      SubnetId: !Ref PublicSubnet1
#      RouteTableId: !Ref PublicRouteTable
#
#  LambdaSecurityGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupDescription: "Lambda security group"
#      VpcId: !Ref VPC
#
#
  CacheBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: vjgdienynas-cache

  LambdaHandler:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: vjgdienynas-api
      Runtime: provided.al2023
      CodeUri: .
      Handler: bootstrap
      Architectures:
        - x86_64
      Timeout: 60
#      VpcConfig:
#        SecurityGroupIds:
#          - !Ref LambdaSecurityGroup
#        SubnetIds:
#          - !Ref PublicSubnet1
      Policies:
        - S3Policy:
            BucketName: !Ref MyS3Bucket
            PolicyName: LambdaS3Policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                    - s3:ListBucket
                  Resource:
                    - !Sub "arn:aws:s3:::${MyS3Bucket}"
                    - !Sub "arn:aws:s3:::${MyS3Bucket}/*"
      Environment:
        Variables:
          CACHE_BUCKET: !Ref CacheBucket
      Events:
        RootPath:
          Type: HttpApi
          Properties:
            Path: /
            Method: ANY
            ApiId: !Ref DefaultHttpAPI
        HttpApi:
          Type: HttpApi
          Properties:
            Path: /{proxy+}
            Method: ANY
            ApiId: !Ref DefaultHttpAPI

  DefaultHttpAPI:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: '$default'

  CustomDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: "vjgdiary.neglostyti.com"
      DomainNameConfigurations:
        - CertificateArn: "arn:aws:acm:eu-central-1:647278206015:certificate/73186c7e-3eb1-4917-b073-50ef71522bb4"

  ApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref DefaultHttpAPI
      DomainName: !Ref CustomDomainName
      Stage: '$default'

  LambdaHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${LambdaHandler}
      RetentionInDays: 1

